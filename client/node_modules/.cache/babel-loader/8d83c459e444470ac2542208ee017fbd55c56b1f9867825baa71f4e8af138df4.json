{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GAYATRI\\\\Desktop\\\\project\\\\client\\\\src\\\\context\\\\CartContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState([]);\n  const addToCart = product => {\n    setCart(prevCart => {\n      const existingItem = prevCart.find(item => item._id === product._id);\n      if (existingItem) {\n        toast.info('Item already in cart. Update quantity there.');\n        return prevCart;\n      }\n      toast.success('Added to cart');\n      return [...prevCart, {\n        ...product,\n        quantity: 1\n      }];\n    });\n  };\n  const removeFromCart = productId => {\n    setCart(prevCart => prevCart.filter(item => item._id !== productId));\n    toast.success('Removed from cart');\n  };\n  const updateQuantity = (productId, quantity) => {\n    if (quantity < 1) return;\n    setCart(prevCart => prevCart.map(item => item._id === productId ? {\n      ...item,\n      quantity\n    } : item));\n  };\n  const clearCart = () => {\n    setCart([]);\n    toast.success('Cart cleared');\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","toast","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","addToCart","product","prevCart","existingItem","find","item","_id","info","success","quantity","removeFromCart","productId","filter","updateQuantity","map","clearCart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/GAYATRI/Desktop/project/client/src/context/CartContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cart, setCart] = useState([]);\r\n\r\n  const addToCart = (product) => {\r\n    setCart((prevCart) => {\r\n      const existingItem = prevCart.find((item) => item._id === product._id);\r\n      if (existingItem) {\r\n        toast.info('Item already in cart. Update quantity there.');\r\n        return prevCart;\r\n      }\r\n      toast.success('Added to cart');\r\n      return [...prevCart, { ...product, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (productId) => {\r\n    setCart((prevCart) => prevCart.filter((item) => item._id !== productId));\r\n    toast.success('Removed from cart');\r\n  };\r\n\r\n  const updateQuantity = (productId, quantity) => {\r\n    if (quantity < 1) return;\r\n    setCart((prevCart) =>\r\n      prevCart.map((item) =>\r\n        item._id === productId ? { ...item, quantity } : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const clearCart = () => {\r\n    setCart([]);\r\n    toast.success('Cart cleared');\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cart,\r\n        addToCart,\r\n        removeFromCart,\r\n        updateQuantity,\r\n        clearCart,\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMU,SAAS,GAAIC,OAAO,IAAK;IAC7BF,OAAO,CAAEG,QAAQ,IAAK;MACpB,MAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKL,OAAO,CAACK,GAAG,CAAC;MACtE,IAAIH,YAAY,EAAE;QAChBZ,KAAK,CAACgB,IAAI,CAAC,8CAA8C,CAAC;QAC1D,OAAOL,QAAQ;MACjB;MACAX,KAAK,CAACiB,OAAO,CAAC,eAAe,CAAC;MAC9B,OAAO,CAAC,GAAGN,QAAQ,EAAE;QAAE,GAAGD,OAAO;QAAEQ,QAAQ,EAAE;MAAE,CAAC,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,cAAc,GAAIC,SAAS,IAAK;IACpCZ,OAAO,CAAEG,QAAQ,IAAKA,QAAQ,CAACU,MAAM,CAAEP,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKK,SAAS,CAAC,CAAC;IACxEpB,KAAK,CAACiB,OAAO,CAAC,mBAAmB,CAAC;EACpC,CAAC;EAED,MAAMK,cAAc,GAAGA,CAACF,SAAS,EAAEF,QAAQ,KAAK;IAC9C,IAAIA,QAAQ,GAAG,CAAC,EAAE;IAClBV,OAAO,CAAEG,QAAQ,IACfA,QAAQ,CAACY,GAAG,CAAET,IAAI,IAChBA,IAAI,CAACC,GAAG,KAAKK,SAAS,GAAG;MAAE,GAAGN,IAAI;MAAEI;IAAS,CAAC,GAAGJ,IACnD,CACF,CAAC;EACH,CAAC;EAED,MAAMU,SAAS,GAAGA,CAAA,KAAM;IACtBhB,OAAO,CAAC,EAAE,CAAC;IACXR,KAAK,CAACiB,OAAO,CAAC,cAAc,CAAC;EAC/B,CAAC;EAED,oBACEf,OAAA,CAACC,WAAW,CAACsB,QAAQ;IACnBC,KAAK,EAAE;MACLnB,IAAI;MACJE,SAAS;MACTU,cAAc;MACdG,cAAc;MACdE;IACF,CAAE;IAAAnB,QAAA,EAEDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACxB,EAAA,CA/CWF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAiDzB,OAAO,MAAM4B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGpC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAAC+B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}